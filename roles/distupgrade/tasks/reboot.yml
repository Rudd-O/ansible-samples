- name: fail reboot when incompatible
  fail: msg='This task is incompatible with ansible_connection={{ ansible_connection }}'
  when: ansible_connection != "ssh" and ansible_connection != "qubes" and ansible_connection != "smart"

- name: run reboot command
  shell: sleep 2 && '{{ reboot_command|default("reboot") }}'
  ignore_errors: true
  async: 1
  poll: 0

- name: locally notify about reboot
  local_action: shell zenity --notification --text "Machine "{{ inventory_hostname|quote }}" is shutting down.  Ensure it decrypts if it is encrypted." || true

- block:
  - name: power off VM via dom0
    shell: qvm-shutdown --wait {{ inventory_hostname|quote }}
    delegate_to: '{{ (qubes|default({})).dom0_vm|default(qubes_dom0_vm) }}'
    become: False
    register: shutdownviadom0
    failed_when: 'shutdownviadom0.rc|default(None) != 0 and "ERROR: VM already stopped" not in shutdownviadom0.stderr'
  - meta: clear_host_errors
  when: ansible_connection|default("") == "qubes"

- block:
  - name: wait for server to come back after reboot
    local_action: wait_for port=22 delay=15 timeout={{ timeout|default(600) }} search_regex=OpenSSH host={{ ansible_ssh_host|default(inventory_hostname) }} state=started
    when: ansible_connection != "qubes"
    register: waitalive
    failed_when: '{{ waitalive.failed|default(False) and "reset by peer" not in waitalive.module_stderr|default("") }}'
    become: False

  - name: wait for server to come back after reboot, take 2
    local_action: wait_for port=22 delay=15 timeout={{ timeout|default(600) }} search_regex=OpenSSH host={{ ansible_ssh_host|default(inventory_hostname) }} state=started
    when: ansible_connection != "qubes" and ("reset by peer" in waitalive.module_stderr|default(""))
    become: False

  - name: wait for VM to come back after reboot
    raw: bash -c 'sleep 1 ; echo -n yes'
    register: after_reboot
    retries: '{{ (timeout|default(600) / 5)|int }}'
    until: '"yes" in after_reboot.stdout|default("")'
    delay: 5
    when: ansible_connection == "qubes"
    become: False
  when: reboot_command|default("reboot") != "poweroff"
